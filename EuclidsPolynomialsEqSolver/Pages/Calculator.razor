@page "/"
@page "/calculator"
@using AsyncAwaitBestPractices
@inherits MathJaxBlazor.MathJaxContentComponent
@inject IJSRuntime JsRuntime

<PageTitle>Calculator</PageTitle>

<h4>Algoritmo extendido de Euclides para polinomios de orden $$\mathbb{Z}_2$$</h4>
<style scoped>
    .mud-container-maxwidth-md {
        max-width: unset !important;
    }
</style>
<div class="row" style="width: 100%">
    <div class="col-9">
        <MudPaper Class="pa-4">
            <MudForm @bind-IsValid="@isValid" @ref="form">

                <MudTextField T="string" Label="$$G(x)$$"
                              Required="true"
                              @bind-Value="Gx"
                              Placeholder="x^10 + 2x^1 + 1 + ..."
                              Variant="Variant.Outlined"
                              Validation="@(new Func<string, IEnumerable<string>>(ValidatePolynom))"
                              RequiredError="Debe ingresar un polinomio ecuación válido para $$G(x)$$" />

                <MudTextField T="string" Label="$$F(x)$$"
                              Required="true"
                              @bind-Value="Hx"
                              Placeholder="x^10 + 2x^1 + 1 + ..."
                              Variant="Variant.Outlined"
                              Validation="@(new Func<string, IEnumerable<string>>(ValidatePolynom))"
                              RequiredError="Debe ingresar un polinomio ecuación válido para $$F(x)$$" />
                <div style="height: 20px" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true"
                           StartIcon="@Icons.Material.Filled.Calculate" OnClick="@Calculate">Calcular</MudButton>
                <MudButton Variant="Variant.Filled" DisableElevation="true"
                           OnClick="@Clear"
                           StartIcon="@Icons.Material.Filled.RestoreFromTrash">Limpiar</MudButton>

            </MudForm>
        </MudPaper>
    </div>
    <div class="col-3">
        <h5>Ejemplos</h5>
        @{
            RenderActions = new List<Action>();
            int i = 1;
            foreach (Tuple<PolynomialEq, PolynomialEq> sample in Samples)
            {
                string gxId = $"samplegx{i++}";
                string hxId = $"samplehx{i++}";
                <MudPaper Class="pa-4">
                    <p id="@gxId"></p>
                    <p id="@hxId"></p>
                    <MudButton Variant="Variant.Filled" DisableElevation="true"
                       OnClick="@(()=>SetSample(sample))"
                       StartIcon="@Icons.Material.Filled.Star">Mostrar</MudButton>
                </MudPaper>
                <div style="height: 3vh"></div>
                RenderActions.Add(()=>JsRuntime.InvokeVoidAsync("setPText", gxId, sample.Item1.ToLatexString().Value).SafeFireAndForget());
                RenderActions.Add(()=>JsRuntime.InvokeVoidAsync("setPText", hxId, sample.Item2.ToLatexString().Value).SafeFireAndForget());
            }
        }
    </div>
</div>

<div style="height: 3vh"></div>
<h5>Teniendo los siguientes polinomios en $$\mathbb{Z}_2$$</h5>
<div>
    <p id="gx"></p>
</div>

<div>
    <p id="hx"></p>
</div>

<div style="height: 3vh"></div>

<div>
    @if (Solution is { } sol)
    {
        <h5>Calcular</h5>
        <p>$$D(x)=gcd(G(x)$$ , $$H(x)$$ , $$S(x)$$ , $$T(x)$$</p>
        @foreach (Step stepBlock in sol.Steps)
        {
            <div class="step-block">
                @foreach (MarkupString step in stepBlock)
                {
                    <p>@step</p>
                }
                <span class="badge">@stepBlock.GetNumber()</span>
            </div>
        }
    }
</div>

<div style="height: 20vh"></div>




@code {
    private List<Action> RenderActions;
    PolynomialEq gx { get; set; } = new PolynomialEq('g',
        new XTerm(10),
        new XTerm(9),
        new XTerm(8),
        new XTerm(6),
        new XTerm(5),
        new XTerm(4),
        XTerm.One);

    PolynomialEq hx { get; set; } = new PolynomialEq('h',
        new XTerm(9),
        new XTerm(6),
        new XTerm(5),
        new XTerm(3),
        new XTerm(2),
        XTerm.One);

    public readonly Tuple<PolynomialEq, PolynomialEq>[] Samples = new[]
    {
        new Tuple<PolynomialEq, PolynomialEq>(new PolynomialEq("G",
            new XTerm(10),
            new XTerm(9),
            new XTerm(8),
            new XTerm(6),
            new XTerm(5),
            new XTerm(4),
            XTerm.One
            ),new PolynomialEq("H",
                new XTerm(9),
                new XTerm(6),
                new XTerm(5),
                new XTerm(3),
                new XTerm(2),
                XTerm.One)),
        new Tuple<PolynomialEq, PolynomialEq>(new PolynomialEq("G",
            new XTerm(12),
            new XTerm(9),
            new XTerm(8),
            new XTerm(6),
            new XTerm(5),
            new XTerm(4),
            XTerm.One
            ),new PolynomialEq("H",
                new XTerm(8),
                new XTerm(6),
                new XTerm(5),
                new XTerm(3),
                new XTerm(2),
                XTerm.One)),
        new Tuple<PolynomialEq,
            PolynomialEq>(new PolynomialEq("G",
            new XTerm(2,3),
            new XTerm(1,4),
            new XTerm(0,1)),
                new PolynomialEq("H",
                    new XTerm(1,3),
                    XTerm.One)),
    };

    ExtendedEuclides? Solution;

    string Gx
    {
        get => gx.IsZero ? "" : gx.ToString(false);
        set
        {
            gx = new PolynomialEq('g');
            if (PolynomialEq.Parse(value, out PolynomialEq eq))
            {
                gx = eq.SetLetter('g');
            }
            JsRuntime.InvokeVoidAsync("setPText", "gx", gx.ToLatexString().Value).SafeFireAndForget();
        }
    }
    string Hx
    {
        get => hx.IsZero ? "" : hx.ToString(false);
        set
        {
            hx = new PolynomialEq('h');
            if (PolynomialEq.Parse(value, out PolynomialEq eq))
            {
                hx = eq.SetLetter('h');
            }
            StateHasChanged();
            JsRuntime.InvokeVoidAsync("setPText", "hx", hx.ToLatexString().Value).SafeFireAndForget();
        }
    }

    MudForm form;
    bool isValid;

    private IEnumerable<string> ValidatePolynom(string value)
    {
        if (!PolynomialEq.Parse(value, out _))
        {
            yield return "El polinomio no es válido";
            yield break;
        }
    }


    private void Clear()
    {
        this.gx = new PolynomialEq('g');
        this.hx = new PolynomialEq('h');
        Solution = null;
        form.Validate().SafeFireAndForget();
    }
    private async Task Calculate()
    {
        await form.Validate();
        if (!isValid)
        {
            return;
        }
        Solution = new ExtendedEuclides(gx, hx);
        Solution.Solve();
    }

    private void SetSample(Tuple<PolynomialEq, PolynomialEq> sample)
    {
        Clear();
        form.Reset();
        this.gx = sample.Item1.Clone();
        this.hx = sample.Item2.Clone();
        RefreshPolynoms();
    }

    private void RefreshPolynoms()
    {
        JsRuntime.InvokeVoidAsync("setPText", "gx", gx.ToLatexString().Value).SafeFireAndForget();
        JsRuntime.InvokeVoidAsync("setPText", "hx", hx.ToLatexString().Value).SafeFireAndForget();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        RenderActions.ForEach(t => t.Invoke());
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            RefreshPolynoms();
        }
    }

}